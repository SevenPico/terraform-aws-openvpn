---
schemaVersion: "2.2"
description: Mysql Configuration.
mainSteps:
  - action: aws:runShellScript
    name: mysqlConfiguration
    inputs:
      runCommand:
        - |
          #!/bin/bash
          RDS_HOST=${rds_host}
          # DEBIAN_FRONTEND=noninteractive

          # sudo rm /var/lib/dpkg/lock > /dev/null 2>&1
          # sudo rm /var/lib/dpkg/lock-frontend > /dev/null 2>&1
          # sudo apt-get update -y -q > /dev/null 2>&1
          # sudo apt-get install libmariadb3 -y -q > /dev/null 2>&1
          # sudo apt-get install mariadb-client-core-10.1 -y -q > /dev/null 2>&1

          apt -y install mariadb-server

          echo "export LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN=1" >> /etc/profile
          RDS_USER=$(aws secretsmanager get-secret-value --secret-id ${rds_secret_arn} --region ${region} | jq -r '.SecretString' | jq -r '.${rds_admin_username_key}')
          RDS_PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${rds_secret_arn} --region ${region} | jq -r '.SecretString' | jq -r '.${rds_admin_password_key}')
          RDS_PORT=$(aws secretsmanager get-secret-value --secret-id ${rds_secret_arn} --region ${region} | jq -r '.SecretString' | jq -r '.${rds_port_key}')

          echo "[client]" > /etc/.my.cnf
          echo "user=$RDS_USER" >> /etc/.my.cnf
          echo "password=$RDS_PASSWORD" >> /etc/.my.cnf
          echo "port=$RDS_PORT" >> /etc/.my.cnf
          chmod go-rwx /etc/.my.cnf
          sudo ln -sf /etc/.my.cnf /root/.my.cnf

          ## SETUP DATABASE
          if ! mysql --host=${rds_host} --port=$RDS_PORT -e 'use as_config;'; then
          echo "Creating MySQL Databases for OpenVPN_AS Backend."
            mysql --host=${rds_host} --port=$RDS_PORT -e 'CREATE DATABASE as_certs;'
            mysql --host=${rds_host} --port=$RDS_PORT -e 'CREATE DATABASE as_config;'
            mysql --host=${rds_host} --port=$RDS_PORT -e 'CREATE DATABASE as_log;'
            mysql --host=${rds_host} --port=$RDS_PORT -e 'CREATE DATABASE as_userprop;'
          else
            echo "Skipping MySQL Database Creation for OpenVPN_AS Backend."
          fi

          sudo service openvpnas stop
          if ! mysql --host=${rds_host} --port=$RDS_PORT -e 'use as_config; select count(*) from config;'; then
            echo "Migrating OpenVPN_AS backend to MySQL."
            cd /usr/local/openvpn_as/scripts
            ./sacli --import GetActiveWebCerts
            sudo service openvpnas stop
            ./dbcvt -t config -s sqlite:////usr/local/openvpn_as/etc/db/config.db -d mysql://${rds_host}/as_config
            ./dbcvt -t certs -s sqlite:////usr/local/openvpn_as/etc/db/certs.db -d mysql://${rds_host}/as_certs
            ./dbcvt -t user_prop -s sqlite:////usr/local/openvpn_as/etc/db/userprop.db -d mysql://${rds_host}/as_userprop
            ./dbcvt -t log -s sqlite:////usr/local/openvpn_as/etc/db/log.db -d mysql://${rds_host}/as_log
         else
            echo "Skipping OpenVPN_AS Backend Migration to MySQL."
         fi

         sed -i "s|\("^config_db=" * *\).*|\1mysql:\/\/${rds_host}\/as_config|" /usr/local/openvpn_as/etc/as.conf
         sed -i "s|\("^user_prop_db=" * *\).*|\1mysql:\/\/${rds_host}\/as_userprop|" /usr/local/openvpn_as/etc/as.conf
         sed -i "s|\("^log_db=" * *\).*|\1mysql:\/\/${rds_host}\/as_log|" /usr/local/openvpn_as/etc/as.conf
         sed -i "s|\("^certs_db=" * *\).*|\1mysql:\/\/${rds_host}\/as_certs|" /usr/local/openvpn_as/etc/as.conf
         sudo service openvpnas restart